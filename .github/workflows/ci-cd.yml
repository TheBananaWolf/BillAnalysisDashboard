name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔍 Lint code with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Run basic import tests
      run: |
        python -c "
        try:
            import src.data_processor
            import src.analyzer
            import src.visualizer
            import src.insights_generator
            import src.notion_scraper
            print('✅ All imports successful!')
        except Exception as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker container
      run: |
        echo "🐳 Testing Docker container startup..."
        
        # Build for testing
        docker build -t bill-analysis-test .
        
        # Start container in background
        docker run -d --name test-container -p 8501:8501 bill-analysis-test
        
        # Wait for startup
        echo "⏳ Waiting for application to start..."
        sleep 15
        
        # Test if the application is responding
        if curl -f http://localhost:8501/healthz 2>/dev/null || curl -f http://localhost:8501 2>/dev/null; then
          echo "✅ Application is responding!"
        else
          echo "❌ Application health check failed"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container
  

  # 📊 Deploy to Streamlit Cloud (optional)
  deploy-streamlit:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-and-build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: ☁️ Check Streamlit Cloud deployment
      run: |
        if [ -n "${{ vars.STREAMLIT_SHARING_URL }}" ]; then
          echo "🎯 Streamlit Cloud configured at: ${{ vars.STREAMLIT_SHARING_URL }}"
          echo "📡 Waiting for Streamlit Cloud to detect changes..."
          
          # Wait for Streamlit Cloud to pick up the changes
          sleep 45
          
          # Test if the app is accessible and responding
          echo "🔍 Testing deployment endpoint..."
          if curl -f -s --max-time 30 "${{ vars.STREAMLIT_SHARING_URL }}" > /dev/null; then
            echo "✅ Streamlit app is accessible and likely updated!"
            echo "🎉 Auto-deployment successful!"
          else
            echo "⚠️ Streamlit app might still be deploying or has issues..."
            echo "🔄 Manual check required at: ${{ vars.STREAMLIT_SHARING_URL }}"
            echo "💡 If this persists, check Streamlit Cloud logs"
          fi
        else
          echo "❌ STREAMLIT_SHARING_URL not configured"
          echo ""
          echo "📋 To enable Streamlit Cloud auto-deployment:"
          echo "1. Go to: https://share.streamlit.io/"
          echo "2. Connect this repository: ${{ github.repository }}"
          echo "3. Set main file: main.py"
          echo "4. Copy the app URL and set as STREAMLIT_SHARING_URL variable"
          echo "5. Future pushes will auto-deploy!"
          echo ""
          echo "🔧 Alternative: Use Railway/Heroku for automated deployment"
        fi

  # 🎉 Notify deployment status
  notify:
    if: always() && github.ref == 'refs/heads/main'
    needs: [test-and-build, deploy-streamlit]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📢 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Container Registry | ✅ Built | \`ghcr.io/${{ github.repository }}:latest\` |" >> $GITHUB_STEP_SUMMARY
        echo "| ☁️ Streamlit | ${{ needs.deploy-streamlit.result == 'success' && '✅ Deployed' || needs.deploy-streamlit.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | ${{ vars.STREAMLIT_SHARING_URL || 'Not configured' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Configure deployment secrets for your preferred platform" >> $GITHUB_STEP_SUMMARY
        echo "- Visit the deployed application URL above" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application logs and performance" >> $GITHUB_STEP_SUMMARY
